- To go or checkout to 1 commit before the latest commit, we use git checkout HEAD~1

- To uncommit the last 3 commits without losing the changes, we first run
   git reset HEAD~3.
   Then we can see the changes made in the last 3 commits and then update it manually and commit it finally.

- In order to uncommit the last 3 commits and also remove the changes, we can run the
   command: git reset --hard HEAD~3.
   This command will completely remove all the changes.

- To look into the changes made in the last 3 commits, we can run
 git diff HEAD~3

- To make a new commit by reverting the last 3 commits, we can run the command:
 git revert --no-commit HEAD~3...HEAD

- You can add all changes at once using
git add . command.

- You can add files one by one specifically using
git add <file_name> command.

- You can add contents of a particular folder by using
git add /<folder_name>/ command.

- How do you delete a branch in Git?
Answer:
Delete a local branch:
git branch -d <branch_name>
Delete a remote branch:
git push origin --delete <branch_name>

-How do you squash commits?
Answer:
Use interactive rebase:
git rebase -i <base_commit>
Mark the commits to squash as squash or s, then save and edit the commit message.

-Squashing multiple commits to a single one overwrites the history which is why it is recommended to be
 done using full caution. This step can be done by running the command:
 git rebase -i HEAD~{{N}}
 where {{N}} represents the number of commits needed to be squashed.

-What is the difference between git reset, git revert, and git checkout?
Answer:
git reset: Moves the branch pointer to a specific commit, altering the history.
git revert: Creates a new commit that undoes a previous commit.
git checkout: Switches branches or restores files to a previous state.


What is the difference between git pull and git fetch?
Answer:
git pull: Fetches updates from a remote branch and merges them into the local branch.
git fetch: Fetches updates from the remote branch but does not merge them. You need to merge manually if required.

 . Differentiate between git pull and git fetch.
 git pull                                                                       	git fetch
 This command pulls new changes from the
  currently working branch located
   in the remote central repository.                  This command is also used for a similar purpose but
                                                       it follows a two step process:
                                                      1. Pulls all commits and changes from desired branch
                                                      and stores them in a new branch of the
                                                       local repository.

                                                      2. For changes to be reflected in the current /
                                                      target branch, git fetch should be followed by
                                                      git merge command.
 git pull = git fetch + git merge


git stash pop command throws away the specified stash (topmost stash by default) after applying it.
git stash apply command leaves the stash in the stash list for future reuse.
 In case we wanted to remove it from the list, we can use the git stash drop command.


--What are the different states in Git?
Answer:
Git has three main states:
Working Directory: Where files are modified.
Staging Area: Where changes are added (git add) before committing.
Repository: Where committed changes are stored permanently.


--How do you revert a commit that has already been pushed?
Answer:
Use git revert <commit_hash> to create a new commit that undoes the changes.
If necessary, use git reset for local branches, but this is not recommended for shared branches.


--What would you do if you made a commit to the wrong branch?
Answer:
Switch to the correct branch:

git checkout <correct_branch>
Cherry-pick the commit:

git cherry-pick <commit_hash>
Remove it from the wrong branch using git reset or git revert.


--How would you recover a file deleted in Git?
Answer:
If the file was staged or committed:
git checkout <commit_hash> -- <file_name>
If it was not staged, check your system's trash or use version history tools.

