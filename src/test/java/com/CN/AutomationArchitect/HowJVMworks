How JVM Works – JVM Architecture?


JVM(Java Virtual Machine) acts as a run-time engine to run Java applications.
 JVM is the one that actually calls the main method present in a java code.
 JVM is a part of JRE(Java Runtime Environment).

Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code on one
system and can expect it to run on any other Java-enabled system without any adjustment. This is all possible because
 of JVM.

When we compile a .java file, .class files(contains byte-code) with the same class names present in .java file are
 generated by the Java compiler. This .class file goes into various steps when we run it. These steps together
  describe the whole JVM.

Class Loader Subsystem

It is mainly responsible for three activities.

Loading
Linking
Initialization
Loading: The Class loader reads the “.class” file, generate the corresponding binary data and save it in the method
 area. For each “.class” file, JVM stores the following information in the method area.


The fully qualified name of the loaded class and its immediate parent class.
Whether the “.class” file is related to Class or Interface or Enum.
Modifier, Variables and Method information etc.
After loading the “.class” file, JVM creates an object of type Class to represent this file in the heap memory.
Please note that this object is of type Class predefined in java.lang package. These Class object can be used by
the programmer for getting class level information like the name of the class, parent name, methods and variable
information etc. To get this object reference we can use getClass() method of Object class.

Linking: Performs verification, preparation, and (optionally) resolution.


Verification: It ensures the correctness of the .class file i.e. it checks whether this file is properly
formatted and generated by a valid compiler or not. If verification fails, we get run-time exception
java.lang.VerifyError. This activity is done by the component ByteCodeVerifier.
 Once this activity is completed then the class file is ready for compilation.
Preparation: JVM allocates memory for class variables and initializing the memory to default values.
Resolution: It is the process of replacing symbolic references from the type with direct references. It is done by
 searching into the method area to locate the referenced entity.
Initialization: In this phase, all static variables are assigned with their values defined in the code and static
block(if any). This is executed from top to bottom in a class and from parent to child in the class hierarchy.

In general, there are three class loaders :


Bootstrap class loader: Every JVM implementation must have a bootstrap class loader, capable of loading trusted
classes. It loads core java API classes present in the “JAVA_HOME/jre/lib” directory. This path is popularly known
 as the bootstrap path. It is implemented in native languages like C, C++.

Extension class loader: It is a child of the bootstrap class loader. It loads the classes present in the extensions
directories “JAVA_HOME/jre/lib/ext”(Extension path) or any other directory specified by the java.ext.dirs system
property. It is implemented in java by the sun.misc.Launcher$ExtClassLoader class.

System/Application class loader: It is a child of the extension class loader. It is responsible to load classes
from the application classpath. It internally uses Environment Variable which mapped to java.class.path. It is also
 implemented in Java by the sun.misc.Launcher$AppClassLoader class.