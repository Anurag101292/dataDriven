
FOLLOWING_SIBLING
//div[@class='canvas- graph']//a[@href='/accounting.html'][i[@class='icon-usd']]/
following-sibling::h4"
ANCESTOR SIBLING
//div[.//a[text()='SELENIUM']]/ancestor::div[@class='rt-grid-2 rt-omega']/following-sibling::div
Xpath=//*[text()='Enterprise Testing']//ancestor::div
FOLLOWING
Xpath=//*[@type='text']//following::input
PRECEDING
Preceding: This function will return the preceding element of the particular element.
Xpath= //*[@type='submit']//preceding::input
Contains
//h4/a[contains(text(),'SAP M')]";
Xpath=//input[@type='submit' and @name='btnLogin']
Xpath=//label[starts-with(@id,'message')]
Xpath=//*[@type='text']//following::input
Xpath=//*[@type='text']//following::input[1]
Xpath=//*[@id='java_technologies']//child::li
Xpath=//*[@type='submit']//preceding::input
xpath=//*[@type='submit']//following-sibling::input
Xpath =//*[@type='password']//self::input
Xpath=//*[@id='rt-feature']//descendant::a

EXPLICIT WAIT
WebDriverWait wait=new WebDriverWait(driver, 20);
The following are the Expected Conditions that can be used in Selenium Explicit Wait
alertIsPresent() elementSelectionStateToBe() elementToBeClickable() elementToBeSelected()
frameToBeAvaliableAndSwitchToIt() invisibilityOfTheElementLocated() invisibilityOfElementWithText()
presenceOfAllElementsLocatedBy() presenceOfElementLocated() textToBePresentInElement()
textToBePresentInElementLocated() textToBePresentInElementValue()
titleIs() titleContains() visibilityOf() visibilityOfAllElements() visibilityOfAllElementsLocatedBy() visibilityOfElementLocated()

FLUENT WAIT
Wait wait = new FluentWait(WebDriver reference)
.withTimeout(Duration.ofSeconds(SECONDS))
.pollingEvery(Duration.ofSeconds(SECONDS))
.ignoring(Exception.class);

Question: – How to check webpage is fully loaded or not using Selenium?
Answer: – This situation can be solved by using JavaScript executors.
IWait wait = new OpenQA.Selenium.Support.UI.WebDriverWait(driver, TimeSpan.FromSeconds(30.00));
wait.Until(driver1 => ((IJavaScriptExecutor)driver).ExecuteScript(“return document.readyState”).
Equals(“complete”));

All Interfaces used in selenium

HasCapabilities,HasInputDevices,Interactive,JavascriptExecutor,PrintsPage,
 SearchContext, TakesScreenshot, HasVirtualAuthenticator, WebDriver

 https://naveenautomationlabs.com/realtimeinterviewquestions/

 "
 1. WebDriver is developed completely by w3c standardization
 2. Selenium IDE support foer chrome is available now
 3. Selenium grid - the hubs and nodes are smooth to setup and handle now
 , Once selenium server is started the grid will act both as a hub and a node
 4. Taking sceenshot at the element level ,section level and page level is possible now
 5. support of relative locators"

 Difference between Assert and Verify in selenium
 In the case of assertions, if the assert condition is not met, test case execution will be aborted.
  The remaining tests are skipped, and the test case is marked as failed.
  These assertions are used as checkpoints for testing or validating business-critical transactions.
 In case of verify, tests will continue to run until the last test is executed even if assert conditions are not met.
  Verify or Soft Asserts will report the errors at the end of the test. Simply put, tests will not be aborted if any
   condition is not met. Testers need to invoke the assertAll() method to view the results.
 Both Hard and Soft Assertions are very important for designing and running Selenium webdriver tests.
 They are instrumental in verifying application behavior at critical stages. By using assertions, testing teams can
 determine if an application is working as it is expected to. They can also save teams the trouble of running tests
 that don’t need to be run if a condition is not met.