I believe the biggest distinction is that a stub you have already written with predetermined behavior. 
So you would have a class that implements the dependency (abstract class or interface most likely) 
you are faking for testing purposes and the methods would just be stubbed out with set responses. 
They would not do anything fancy and you would have already written the stubbed code for it outside of your test.

Mock

A mock is something that as part of your test you have to setup with your expectations.
 A mock is not setup in a predetermined way so you have code that does it in your test.
 Mocks in a way are determined at runtime since the code that sets the expectations has to
 run before they do anything.

Difference between Mocks and Stubs

Tests written with mocks usually follow an initialize -> set expectations -> exercise -> verify pattern to 
testing. While the pre-written stub would follow an initialize -> exercise -> verify.

Similarity between Mocks and Stubs

The purpose of both is to eliminate testing all the dependencies of a class or function so your tests
 are more focused and simpler in what they are trying to prove.


Dummy objects are passed around but never actually used. Usually they are just used to fill parameter lists.
Fake objects actually have working implementations, but usually take some shortcut which makes them not 
      suitable for production (an in memory database is a good example).
Stubs provide canned answers to calls made during the test, usually not responding at all to anything 
      outside what's programmed in for the test.
Spies are stubs that also record some information based on how they were called. One form of this might 
      be an email service that records how many messages it was sent.
Mocks are what we are talking about here: objects pre-programmed with expectations which form a specification 
      of the calls they are expected to receive.
