ITestListener: This is the most frequently used TestNG listener. ITestListener is an interface implemented in the class , and that class overrides the ITestListener defined methods. The ITestListener listens to the desired events and executes the methods accordingly. It contains the following methods:
onStart(): invoked after test class is instantiated and before execution of any testNG method.
onTestSuccess(): invoked on the success of a test
onTestFailure(): invoked on the failure of a test
onTestSkipped(): invoked when a test is skipped
onTestFailedButWithinSuccessPercentage(): invoked whenever a method fails but within the defined success percentage
onFinish(): invoked after all tests of a class are executedThe above-mentioned methods use the parameters ITestContext and ITestResult. The ITestContext is a class that contains information about the test run. The ITestResult is an interface that defines the result of the test.
Now, let’s look at an example showcasing the use of this listener.

✅ 1. Project Structure

src/
└── test/
    ├── base/
    │   └── BaseTest.java
    ├── listeners/
    │   └── MyTestListener.java
    └── tests/
        └── LoginTest.java
✅ 2. Dependencies (Maven – pom.xml)
Make sure you have these in your pom.xml:

<dependencies>
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>4.20.0</version>
    </dependency>

    <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>7.10.1</version>
        <scope>test</scope>
    </dependency>
</dependencies>

✅ 3. Base Class – BaseTest.java
package base;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.*;

public class BaseTest {
    public static WebDriver driver;

    @BeforeMethod
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        driver = new ChromeDriver();
        driver.manage().window().maximize();
    }

    @AfterMethod
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    public static WebDriver getDriver() {
        return driver;
    }
}
✅ 4. Listener Class – MyTestListener.java
package listeners;

import base.BaseTest;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.io.FileHandler;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class MyTestListener implements ITestListener {

    @Override
    public void onTestFailure(ITestResult result) {
        System.out.println("❌ TEST FAILED: " + result.getName());

        // Take screenshot
        TakesScreenshot ts = (TakesScreenshot) BaseTest.getDriver();
        File src = ts.getScreenshotAs(OutputType.FILE);
        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String dest = "screenshots/" + result.getName() + "_" + timestamp + ".png";

        try {
            FileHandler.copy(src, new File(dest));
            System.out.println("📷 Screenshot saved to: " + dest);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override public void onTestSuccess(ITestResult result) {
        System.out.println("✅ TEST PASSED: " + result.getName());
    }

    @Override public void onTestStart(ITestResult result) {}
    @Override public void onTestSkipped(ITestResult result) {}
    @Override public void onStart(ITestContext context) {}
    @Override public void onFinish(ITestContext context) {}
}
✅ 5. Test Class – LoginTest.java
package tests;

import base.BaseTest;
import listeners.MyTestListener;
import org.openqa.selenium.By;
import org.testng.Assert;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

@Listeners(MyTestListener.class)
public class LoginTest extends BaseTest {

    @Test
    public void loginValidUser() {
        driver.get("https://example.com/login");
        driver.findElement(By.id("username")).sendKeys("admin");
        driver.findElement(By.id("password")).sendKeys("admin123");
        driver.findElement(By.id("loginBtn")).click();

        // Intentional failure for demo
        Assert.assertTrue(driver.getTitle().contains("DashboardXYZ"));
    }
}
✅ 6. Output When Test Fails
When the test fails, console output will show:
❌ TEST FAILED: loginValidUser
📷 Screenshot saved to: screenshots/loginValidUser_20250717_153244.png
