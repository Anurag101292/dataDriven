4. Polymorphic Test Data Models (e.g., Data-Driven Tests)
Say your test data includes different input types â€” Credentials, SearchQuery, CartAction.

sealed interface TestInput permits Credentials, SearchQuery, CartAction {}

record Credentials(String user, String pass) implements TestInput {}
record SearchQuery(String keyword) implements TestInput {}
record CartAction(String itemId, int quantity) implements TestInput {}

public void perform(TestInput input) {
    if (input instanceof Credentials c) {
        System.out.println("Logging in as: " + c.user());
    } else if (input instanceof SearchQuery s) {
        System.out.println("Searching for: " + s.keyword());
    } else if (input instanceof CartAction a) {
        System.out.println("Adding to cart: " + a.itemId() + " x" + a.quantity());
    }
}
-------------------------------------------------------------------------------------------
sealed interface RetryCondition permits TimeoutError, AuthError, NetworkError {}

record TimeoutError(int waitSeconds) implements RetryCondition {}
record AuthError(String reason) implements RetryCondition {}
record NetworkError(String host) implements RetryCondition {}

public void retryIfNeeded(RetryCondition err) {
    if (err instanceof TimeoutError t) {
        System.out.println("Waiting for " + t.waitSeconds() + "s then retrying...");
    } else if (err instanceof AuthError a) {
        System.out.println("Authentication failed: " + a.reason());
    } else if (err instanceof NetworkError n) {
        System.out.println("Network issue at: " + n.host());
    }
}
