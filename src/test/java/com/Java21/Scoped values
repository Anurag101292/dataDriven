5. ðŸš€ Scoped Values (Preview â€“ Alternative to ThreadLocal)
Allows passing values to code running in different threads without using ThreadLocal, more safely and efficiently.

ScopedValue<String> USER = ScopedValue.newInstance();

ScopedValue.where(USER, "anurag").run(() -> {
    System.out.println("User: " + USER.get());
});
----------------------------------------------------------------------------------------------
âœ… Use Case: UI Automation with Playwright + Java 21 + ScopedValue
ðŸŽ¯ Scenario:
You're running multiple tests in parallel virtual threads, and want to:

Track which user/test ID is running in which thread

Avoid using ThreadLocal, which is heavier and prone to leaks

âœ… What is ScopedValue?
ScopedValue is a thread-safe, immutable value that is:

Bound to a code scope

Not globally mutable like ThreadLocal

Clean and automatic to clear after scope

âœ… Example: Parallel Login Testing with ScopedValue

import com.microsoft.playwright.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.StructuredTaskScope;
import java.util.concurrent.TimeUnit;
import java.lang.ScopedValue;

public class PlaywrightScopedValueExample {

    // Define a scoped variable for test logging/tracking
    static final ScopedValue<String> TEST_USER = ScopedValue.newInstance();

    public static void main(String[] args) throws InterruptedException {

        List<String> users = List.of("user1", "user2", "admin");

        for (String user : users) {
            ScopedValue.where(TEST_USER, user).run(() -> runLoginTest());
        }
    }

    static void runLoginTest() {
        try (Playwright playwright = Playwright.create()) {
            Browser browser = playwright.chromium().launch();
            Page page = browser.newPage();

            page.navigate("https://example.com/login");

            // Use scoped value for contextual logging
            String currentUser = TEST_USER.get();

            page.fill("#username", currentUser);
            page.fill("#password", "secretPassword");
            page.click("#login");

            boolean isLoggedIn = page.isVisible("#dashboard");

            System.out.printf("[%s] Login result: %s%n", currentUser, isLoggedIn ? "PASS" : "FAIL");

            browser.close();
        }
    }
}
âœ… Output Example:

[user1] Login result: PASS
[user2] Login result: PASS
[admin] Login result: FAIL
